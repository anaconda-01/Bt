5..
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EmployeeData {
    // Structure to hold employee details
    struct Employee {
        uint id;
        string name;
        string department;
        uint salary;
    }

    // Array to store employee data
    Employee[] public employees;

    // Mapping to keep track of employee existence
    mapping(uint => bool) public employeeExists;

    // Function to add a new employee
    function addEmployee(uint _id, string memory _name, string memory _department, uint _salary) public {
        require(!employeeExists[_id], "Employee ID already exists.");
        employees.push(Employee(_id, _name, _department, _salary));
        employeeExists[_id] = true;
    }

    // Function to get the total number of employees
    function getEmployeeCount() public view returns (uint) {
        return employees.length;
    }

    // Function to retrieve employee details by id
    function getEmployee(uint _id) public view returns (string memory name, string memory department, uint salary) {
        for (uint i = 0; i < employees.length; i++) {
            if (employees[i].id == _id) {
                return (employees[i].name, employees[i].department, employees[i].salary);
            }
        }
        revert("Employee not found");
    }

    // Fallback function to handle calls to non-existent functions or Ether with data
    fallback() external payable {
        // Ether sent with data will be stored here
    }

    // Receive function to handle plain Ether transfers
    receive() external payable {
        // Ether sent with no data will be stored here
    }

    // Function to get the contract balance
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}




3..

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract BankAccount
{
    // Private state variable to store owner address
    address private owner;
    
    // State variable to store the balance of the contract
    uint256 public balance;

    // Constructor to set the contract deployer as the owner
    constructor() {
        owner = msg.sender;
        balance = 0;
    }

    // Function to get the address of the owner
    function getOwner() public view returns (address) {
        return owner;
    }

    // Function to deposit Ether into the contract
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balance += msg.value; // Increase the balance by the deposited amount
    }

    // Function to withdraw Ether from the contract
    function withdraw(uint256 amount) public {
        require(msg.sender == owner, "Only the owner can withdraw");
        require(amount <= balance, "Insufficient balance");

        balance -= amount; // Deduct the amount from the balance
        payable(msg.sender).transfer(amount); // Transfer the amount to the owner
    }

    // Function to return the current balance of the contract
    function getBalance() public view returns (uint256) {
        return balance;
    }

    // Fallback function to handle Ether sent directly to the contract
    fallback() external payable {
        balance += msg.value;
    }

    // Receive function to handle direct Ether transfers to the contract
    receive() external payable {
        balance += msg.value;
    }
}

